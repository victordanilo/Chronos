// media querys
@mixin mq($args...) {
  $media-type: 'screen';
  $media-type-key: 'media-type';
  $args: keywords($args);
  $expr: '';

  @if map-has-key($args, $media-type-key) {
    $media-type: map-get($args, $media-type-key);
    $args: map-remove($args, $media-type-key);
  }

  @each $key, $value in $args {
    @if $value {
      $expr: "#{$expr} and (#{$key}: #{$value})";
    }
  }

  @media #{$media-type $expr}{
    @content;
  }
}
@mixin screen($args...) {
  @include mq($args...) {
    @content;
  }
}

@mixin screen-small($orientation: false) {
  @include mq($min-width: breakpoint('small'), $orientation: $orientation) {
    @content;
  }
}
@mixin screen-max-small($orientation: false) {
  @include mq($max-width: breakpoint('small') - 1, $orientation: $orientation) {
    @content;
  }
}

@mixin screen-medium($orientation: false) {
  @include mq($min-width: breakpoint('medium'), $orientation: $orientation) {
    @content;
  }
}
@mixin screen-max-medium($orientation: false) {
  @include mq($max-width: breakpoint('medium') - 1, $orientation: $orientation) {
    @content;
  }
}

@mixin screen-large($orientation: false) {
  @include mq($min-width: breakpoint('large'), $orientation: $orientation) {
    @content;
  }
}
@mixin screen-max-large($orientation: false) {
  @include mq($max-width: breakpoint('large') - 1, $orientation: $orientation) {
    @content;
  }
}

@mixin screen-xlarge($orientation: false) {
  @include mq($min-width: breakpoint('xlarge'), $orientation: $orientation) {
    @content;
  }
}
@mixin screen-max-xlarge($orientation: false) {
  @include mq($max-width: breakpoint('xlarge') - 1, $orientation: $orientation) {
    @content;
  }
}

@mixin screen-width($min, $max, $orientation: false) {
  @include mq($min-width: breakpoint($min), $max-width: breakpoint($max) - 1, $orientation: $orientation) {
    @content;
  }
}
@mixin screen-width-min($min, $orientation: false) {
  @include mq($min-width: breakpoint($min), $orientation: $orientation) {
    @content;
  }
}
@mixin screen-width-max($max, $orientation: false) {
  @include mq($max-width: breakpoint($max), $orientation: $orientation) {
    @content;
  }
}

@mixin screen-height($min, $max, $orientation: false) {
  @include mq($min-height: breakpoint($min), $max-height: breakpoint($max) - 1, $orientation: $orientation) {
    @content;
  }
}
@mixin screen-height-min($min, $orientation: false) {
  @include mq($min-height: breakpoint($min)) {
    @content;
  }
}
@mixin screen-height-max($max, $orientation: false) {
  @include mq($max-height: breakpoint($max)) {
    @content;
  }
}

@mixin screen-landscape() {
  @include mq($orientation: landscape) {
    @content;
  }
}
@mixin screen-portrait() {
  @include mq($orientation: portrait) {
    @content;
  }
}
@mixin print {
  @media print {
    @content;
  }
}


// retina background-image support with non-retina fall back
@mixin retina_image($file-1x, $file-2x, $width-1x, $height-1x){
  background-image: url("#{$file-1x}");
  background-repeat: no-repeat;
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and ( min--moz-device-pixel-ratio: 2),
  only screen and ( -o-min-device-pixel-ratio: 2/1),
  only screen and ( min-device-pixel-ratio: 2),
  only screen and ( min-resolution: 192dppx),
  only screen and ( min-resolution: 2dppx) {
    background-image: url("#{$file-2x}");
    background-size: $width-1x $height-1x;
  }
}

// box-sizing: border-box (this and all childrens)
@mixin border-box(){
  &,
  &:before,
  &:after,
  *,
  *:before,
  *:after {
    box-sizing: border-box;
  }
}

// clearfix
@mixin clearfix(){
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// shadows
@mixin box-shadow($level: 1) {
  @if($level == 0){
    box-shadow: none !important;
  }
  @if($level == 1) {
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  }
  @if($level == 2) {
    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
  }
  @if($level == 3) {
    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
  }
  @if($level == 4) {
    box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  }
  @if($level == 5) {
    box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  }
}
@mixin box-shadow-top {
  box-shadow: 0px -2px 5px rgba(0,0,0,.26);
}
@mixin box-shadow-left {
  box-shadow: -2px 2px 5px rgba(0,0,0,.26);
}
@mixin box-shadow-right {
  box-shadow: 2px 2px 5px rgba(0,0,0,.26);
}

// text-truncat - prevents text from wrapping into multiple lines
@mixin text-truncate {
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// fonts formatting
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
@mixin font-style($font-family: $font-family-default, $color: false, $size: false, $weight: false, $height: false) {
  @if $font-family {font-family: $font-family;}
  @if $color {color: $color;}
  @if $size {font-size: $size;}
  @if $weight {font-weight: $weight;}
  @if $height {line-height: $height;}
}
@mixin font-size($weight: 400, $size: 14px, $height: 20px){
  @if $weight {font-weight: $weight;}
  @if $size {font-size: $size;}
  @if $height {line-height: $height;}
}